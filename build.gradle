buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'org.hidetake.swagger.generator' version '2.12.0'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'org.mk'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
sourceSets {
    generated {
        java.srcDir("${buildDir}/swagger-code-lanPartyCalc/src/main/")
    }
}
repositories {
    mavenCentral()
    jcenter()
}

configurations {
    mapstruct
    ktlint
}

dependencies {
    compile('javax.xml.bind:jaxb-api:2.3.0')
    compile('com.sun.xml.bind:jaxb-core:2.3.0')
    compile('com.sun.xml.bind:jaxb-impl:2.3.0')

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-mustache')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('org.flywaydb:flyway-core')
    compile('com.h2database:h2')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile('org.mapstruct:mapstruct-jdk8:1.2.0.Final')
    compile "io.swagger:swagger-annotations:1.5.21"

    compileOnly('org.projectlombok:lombok')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')

    ktlint "com.github.shyiko:ktlint:0.27.0"
    mapstruct('org.mapstruct:mapstruct-processor:1.2.0.Final')
    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.3.1'
    swaggerUI 'org.webjars:swagger-ui:3.18.2'
}
swaggerSources {
    lanPartyCalc {
        inputFile = file('swagger.yaml')
        code {
            language = 'spring'
            configFile = file('swagger-config.json')
            dependsOn validation
            components = [models: true, apis: true]
        }
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}


compileJava.dependsOn generateSwaggerCode
compileJava {
    source += sourceSets.generated.java
}