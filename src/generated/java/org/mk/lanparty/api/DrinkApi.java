/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.mk.lanparty.api;

import org.mk.lanparty.model.Drink;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-07T12:00:30.348+02:00")

@Api(value = "drink", description = "the drink API")
public interface DrinkApi {

    DrinkApiDelegate getDelegate();

    @ApiOperation(value = "Delete an existing drink", nickname = "deleteDrink", notes = "Delete an existing drink", tags={ "drink", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/drink/{drinkId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteDrink(@Min(1)@ApiParam(value = "ID of the drink that needs to be deleted",required=true) @PathVariable("drinkId") Long drinkId) {
        return getDelegate().deleteDrink(drinkId);
    }


    @ApiOperation(value = "Returns all drinks", nickname = "getDrinks", notes = "Returns a list of all drinks in the system", response = Drink.class, responseContainer = "List", tags={ "drink", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Drink.class, responseContainer = "List") })
    @RequestMapping(value = "/drink",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Drink>> getDrinks() {
        return getDelegate().getDrinks();
    }


    @ApiOperation(value = "Create new Drink", nickname = "postDrink", notes = "Creates a new drink in the system", response = Drink.class, tags={ "drink", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Drink.class) })
    @RequestMapping(value = "/drink",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Drink> postDrink() {
        return getDelegate().postDrink();
    }


    @ApiOperation(value = "Update an existing drink", nickname = "putDrink", notes = "Updates the price or name of an existing drink", response = Drink.class, tags={ "drink", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Drink.class) })
    @RequestMapping(value = "/drink",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<Drink> putDrink() {
        return getDelegate().putDrink();
    }

}
