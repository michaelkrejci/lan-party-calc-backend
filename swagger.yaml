swagger: '2.0'
info:
  description: This is a server for calculating drink consumption at LAN parties
  version: 0.1.0
  title: LAN party calc backend
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: lan-party-calc@schmike.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: lan-party.schmike.me
basePath: /api
tags:
- name: drink
  description: Everything about your drinks
- name: fridge
  description: Access to fridge
- name: user
  description: Operations about user
schemes:
- https
- http
paths:
  /drink:
    get:
      tags:
      - drink
      summary: Returns all drinks
      description: Returns a list of all drinks in the system
      operationId: getDrinks
      produces:
      - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Drink'
    post:
      tags:
      - drink
      summary: Create new Drink
      description: Creates a new drink in the system
      operationId: postDrink
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Drink'
    put:
      tags:
      - drink
      summary: Update an existing drink
      description: Updates the price or name of an existing drink
      operationId: putDrink
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Drink'
  '/drink/{drinkId}':
    delete:
      tags:
      - drink
      summary: Delete an existing drink
      description: Delete an existing drink
      operationId: deleteDrink
      produces:
      - application/json
      parameters:
      - name: drinkId
        in: path
        description: ID of the drink that needs to be deleted
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /fridge/inventory:
    get:
      tags:
      - fridge
      summary: Returns Fridge inventories
      description: Returns a list of fridge entries
      operationId: getInventory
      produces:
      - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/InventoryItem'
            additionalProperties:
              type: integer
              format: int32
  /fridge/order:
    post:
      tags:
      - fridge
      summary: Place an order for a drink
      description: ''
      operationId: placeOrder
      produces:
      - application/xml
      - application/json
      parameters:
      - in: body
        name: body
        description: order placed for purchasing the drink
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid Order
  '/fridge/order/{orderId}':
    get:
      tags:
      - fridge
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.
        Other values will generated exceptions
      operationId: getOrderById
      produces:
      - application/xml
      - application/json
      parameters:
      - name: orderId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        maximum: 10
        minimum: 1
        format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
      - fridge
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
      - application/xml
      - application/json
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/xml
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
      - application/xml
      - application/json
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
      - application/xml
      - application/json
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
      - application/xml
      - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
      - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
      - application/xml
      - application/json
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/xml
      - application/json
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/xml
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:admin': manage everything
      'write:fridge': modify contents in your fridge
      'read': read everything
definitions:
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      drink:
        $ref: Drink
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
    xml:
      name: Order
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      roomNumber:
        type: integer
    xml:
      name: User
  InventoryItem:
    type: object
    properties:
      drink:
        $ref: '#/definitions/Drink'
      quantity:
        type: integer
        format: int32
    xml:
      name: InventoryItem
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Drink:
    type: object
    required:
    - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Wieselburger
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
    xml:
      name: Pet
externalDocs:
  description: Find out more about LAN party calc
  url: 'https://github.com/michaelkrejci/lan-party-calc-backend'
